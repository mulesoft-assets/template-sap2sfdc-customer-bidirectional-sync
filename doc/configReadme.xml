<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">SAP and Salesforce Customer/Account Bi-Directional Sync</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
		<![CDATA[
Use this template if you would like to sync Customers from SAP to Salesforce Accounts in manner real-time synchronization using Polling.
The inbound SAP endpoint retrieves all Accounts in SAP using the custom BAPI **ZMULE\_CUSTOMER\_GETLIST** and transforms them to Salesforce Accounts.
In the other direction, the synchronization is completed by polling Salesforce for Accounts and sending them to SAP using the standard IDoc DEBMAS01.
]]>
		</section>
		<section id="considerations">
		<![CDATA[
To make this Anypoint Template run, there are certain preconditions that must be considered.
All of them deal with the preparations in both SAP and SFDC systems, that must be made in order for all to run smoothly.
**Failling to do so could lead to unexpected behavior of the template.**

Before continue with the use of this Anypoint Template, you may want to check out this [Documentation Page](http://www.mulesoft.org/documentation/display/current/SAP+Connector#SAPConnector-EnablingYourStudioProjectforSAP), that will teach you how to work 
with SAP and Anypoint Studio-

## Disclaimer

This Anypoint template uses a few private Maven dependencies in oder to work. If you intend to run this template with Maven support, please continue reading.

You will find that there are two dependencies in the pom.xml file that begin with the group id - com.sap.conn:
	**com.sap.conn.jco** and  **com.sap.conn.idoc**
These dependencies are private for Mulesoft and will cause you application not to build from a Maven command line. You need to replace them with "provided" scope and copy the libraries into the build path.
]]>
		</section>
			<section id="sap_src">
<![CDATA[

In order for this Anypoint Template to work, there are a few things that need to be done in SAP first.

1. RFC destination
of type "T = TCP/IP Connection" pointing to Program ID on gateway host needs to be created. The destination uses Unicode communication type with target system.

2. Program ID registration
RFC SDK is used to register Program ID on gateway host. Same Program ID name is used here as in the RFC destination.

3. Partner Profile
needs to be customized; type of Logical System as partner type. Message type DEBMAS is defined as Outbound and Inbound parameter. For Outbound parameter: As receiver port an RFC destination created earlier is used. IDoc Type DEBMAS01 is defined. For Inbound parameter: Process Code DEBM is used. IDoc Type DEBMAS01 is defined.

3. Partner Port
needs to be defined for type of IDoc record type of SAP release 4.x as its version. As RFC destination same RFC destination created earlier is used.

&nbsp;
]]>
		</section>
		
		<section id="default_sap_dst">
<![CDATA[
&nbsp;
]]>
		</section>
		<section id="sfdc_dst">
		<![CDATA[
&nbsp;
]]>
		</section>
		<section id="running_on_studio">
		<![CDATA[
In order to make this Anypoint Template run on Mule Studio there are a few extra steps that needs to be made.
Please check this Documentation Page:

+ [Enabling Your Studio Project for SAP](http://www.mulesoft.org/documentation/display/current/SAP+Connector#SAPConnector-EnablingYourStudioProjectforSAP)
		]]>
		</section>
		<section id="application_configuration">
		<![CDATA[

+ polling.frequency `20000`
+ polling.start.delay `1000`
+ watermark.default.expression `2014-08-01T10:46:00.000Z`
+ watermark.default.expression.sap `2014-08-01T12:29:44Z`

+ page.size `100`

**SAP Connector configuration**

+ sap.jco.ashost `your.sap.address.com`
+ sap.jco.user `SAP_USER`
+ sap.jco.passwd `SAP_PASS`
+ sap.jco.sysnr `14`
+ sap.jco.client `800`
+ sap.jco.lang `EN`

+ sap.default.accountGroup `ZAG2`

**SAP Endpoint configuration**

+ sap.jco.connectioncount `2`
+ sap.jco.gwhost `your.sap.addres.com`
+ sap.jco.gwservice `sapgw14`
+ sap.jco.idoc.programid `PROGRAM_ID`

**SalesForce Connector configuration**

+ sfdc.username `bob.dylan@sfdc`
+ sfdc.password `DylanPassword123`
+ sfdc.securityToken `avsfwCUl7apQs56Xq2AKi3X`
+ sfdc.url `https://test.salesforce.com/services/Soap/u/32.0`
+ sfdc.integration.user.id `00520000003LtvG`

]]>
		</section>
		<section id="api_calls">
		<![CDATA[
SalesForce imposes limits on the number of API Calls that can be made.
Therefore calculating this amount may be an important factor to
consider. Customer migration template calls to the API can be
calculated using the formula:

**X / 200**

Being X the number of Accounts to be synchronized on each run.

The division by 200 is because, by default, Accounts are gathered in groups
of 200 for each Upsert API Call in the commit step. Also consider
that this calls are executed repeatedly every polling cycle.

For instance if 10 records are fetched from origin instance, then 1 api
calls to SFDC will be made ( 1).
]]>
		</section>

		<section id="default_business_logic_xml">
		<![CDATA[
The functional aspect of the Anypoint Template is implemented on this XML, directed by two batch jobs that will be responsible for creations/updates of Customers and Accounts in both ways. The several message processors constitute four high level actions that fully implement the logic of this Anypoint Template:

1. Job executions are invoked from the trigger flows (endpoints.xml) everytime there is a new query executed asking for created/updated Customers or Accounts.
2. From SAP to SFDC: during the Process stage, each SAP Customer will be mapped into an SFDC Account and matched by name with the existent ones in the SFDC instance. After that, the Account will be upserted to the SFDC instance. 
3. From SFDC to SAP: during the Process stage, all the information needed to upsert the Customer will be retrieved from the SAP instance, and then the original Account will be mapped into a SAP Customer to proceed with the upsert.
4. Finally during the On Complete stage, the Anypoint Template will unlock the processing for allowing the other direction to be executed.
]]>
		</section>
		
	</sections>
</configuration>